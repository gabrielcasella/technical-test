AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Hello World
Custom:
  Stage: Prod
  TableName: ${self:Custom.Stage}-ApplicationCalls
  TableThroughputs:
    Prod: 1
    Default: 1
    TableThroughput: ${self:Custom.TableThroughputs.${self:Custom.Stage}, self:Custom.TableThroughputs.Default}
Resources:
  LambdaCodePilelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess"
      MaxSessionDuration: 3600
      Path: /
      RoleName: "myob_lambda_codepipeline"
  LambdaDynamoDBRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        MaxSessionDuration: 3600
        Path: /
        RoleName: "myob_lambda_dynamodb"
  LambdaHealthRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: "sts:AssumeRole"
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess"
          MaxSessionDuration: 3600
          Path: /
          RoleName: "myob_lambda_health"
  ApplicationCallsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:Custom.TableName}
        AttributeDefinitions:
          - AttributeName: ApplicationName
            AttributeType: S
        KeySchema:
          - AttributeName: ApplicationName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:Custom.TableThroughput}
          WriteCapacityUnits: ${self:Custom.TableThroughput}
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: application.handler
      Runtime: nodejs8.10
      CodeUri: ./application/
      Environment:
        Variables:
          TableName: ${self:Custom.TableName}
          ApplicationName: myobTechnicalTest
      Role: !GetAtt [ LambdaDynamoDBRole, Arn ]
      Events:
        HelloWorldApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
  MetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: metadata.handler
      Runtime: nodejs8.10
      CodeUri: ./metadata/
      Environment:
        Variables:
          PipelineName: "myob-pipeline"
      Role: !GetAtt [ LambdaCodePilelineRole, Arn ]
      Events:
        MetadataApi:
          Type: Api
          Properties:
            Path: /metadata
            Method: GET
  HealthFunction:
      Type: AWS::Serverless::Function
      Properties:
        Handler: health.handler
        Runtime: nodejs8.10
        CodeUri: ./health/
        Environment:
          Variables:
            TableName: ${self:Custom.TableName}
            HostName: "vcwgpbc01m.execute-api.ap-southeast-2.amazonaws.com"
            Stage: Prod
        Role: !GetAtt [ LambdaHealthRole, Arn ]
        Events:
          HealthApi:
            Type: Api
            Properties:
              Path: /health
              Method: GET